import pytest
from fastapi.testclient import TestClient
from main import app
import json

client = TestClient(app)

class TestVectorDBAPI:
    def test_health_check(self):
        response = client.get("/health")
        assert response.status_code == 200
        assert response.json()["status"] == "healthy"
    
    def test_root_endpoint(self):
        response = client.get("/")
        assert response.status_code == 200
        assert "message" in response.json()
    
    def test_insert_document(self):
        document_data = {
            "doc_id": "test_doc_1",
            "text": "This is a test document about machine learning",
            "metadata": {"category": "AI", "author": "test"}
        }
        
        response = client.post("/api/v1/insert", json=document_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["doc_id"] == "test_doc_1"
        assert data["text"] == document_data["text"]
        assert data["metadata"] == document_data["metadata"]
        assert "embedding_dimension" in data
    
    def test_insert_duplicate_document(self):
        document_data = {
            "doc_id": "test_doc_duplicate",
            "text": "This is a duplicate test document",
            "metadata": {"category": "test"}
        }
        
        # Insert first time
        response1 = client.post("/api/v1/insert", json=document_data)
        assert response1.status_code == 200
        
        # Insert second time (should still work - ChromaDB handles updates)
        response2 = client.post("/api/v1/insert", json=document_data)
        assert response2.status_code == 200
    
    def test_search_documents(self):
        # First insert a document
        document_data = {
            "doc_id": "search_test_doc",
            "text": "Python is a programming language for machine learning",
            "metadata": {"category": "programming"}
        }
        client.post("/api/v1/insert", json=document_data)
        
        # Now search
        search_data = {
            "query": "python programming language",
            "n_results": 5,
            "include_distances": True
        }
        
        response = client.post("/api/v1/search", json=search_data)
        assert response.status_code == 200
        
        data = response.json()
        assert data["query"] == search_data["query"]
        assert "results" in data
        assert "total_results" in data
        assert "search_time_ms" in data
    
    def test_get_document(self):
        # First insert a document
        doc_id = "get_test_doc"
        document_data = {
            "doc_id": doc_id,
            "text": "This document will be retrieved",
            "metadata": {"test": "get_operation"}
        }
        client.post("/api/v1/insert", json=document_data)
        
        # Get the document
        response = client.get(f"/api/v1/documents/{doc_id}")
        assert response.status_code == 200
        
        data = response.json()
        assert data["doc_id"] == doc_id
        assert data["text"] == document_data["text"]
        assert data["metadata"] == document_data["metadata"]
    
    def test_get_nonexistent_document(self):
        response = client.get("/api/v1/documents/nonexistent_doc")
        assert response.status_code == 404
    
    def test_delete_document(self):
        # First insert a document
        doc_id = "delete_test_doc"
        document_data = {
            "doc_id": doc_id,
            "text": "This document will be deleted",
        }
        client.post("/api/v1/insert", json=document_data)
        
        # Verify it exists
        response = client.get(f"/api/v1/documents/{doc_id}")
        assert response.status_code == 200
        
        # Delete the document
        response = client.delete(f"/api/v1/documents/{doc_id}")
        assert response.status_code == 200
        assert "deleted successfully" in response.json()["message"]
        
        # Verify it's gone
        response = client.get(f"/api/v1/documents/{doc_id}")
        assert response.status_code == 404
    
    def test_delete_nonexistent_document(self):
        response = client.delete("/api/v1/documents/nonexistent_doc")
        assert response.status_code == 404
    
    def test_collection_info(self):
        response = client.get("/api/v1/collection/info")
        assert response.status_code == 200
        
        data = response.json()
        assert "name" in data
        assert "document_count" in data
        assert isinstance(data["document_count"], int)
    
    def test_batch_insert(self):
        documents = [
            {
                "doc_id": "batch_doc_1",
                "text": "First batch document",
                "metadata": {"batch": 1}
            },
            {
                "doc_id": "batch_doc_2", 
                "text": "Second batch document",
                "metadata": {"batch": 1}
            },
            {
                "doc_id": "batch_doc_3",
                "text": "Third batch document",
                "metadata": {"batch": 1}
            }
        ]
        
        response = client.post("/api/v1/batch/insert", json=documents)
        assert response.status_code == 200
        
        data = response.json()
        assert data["total_documents"] == 3
        assert data["successful_inserts"] >= 0
        assert "success_rate" in data
    
    def test_search_with_metadata_filter(self):
        # Insert documents with different metadata
        documents = [
            {
                "doc_id": "filter_doc_1",
                "text": "Document about cats",
                "metadata": {"animal": "cat", "type": "mammal"}
            },
            {
                "doc_id": "filter_doc_2",
                "text": "Document about dogs", 
                "metadata": {"animal": "dog", "type": "mammal"}
            }
        ]
        
        for doc in documents:
            client.post("/api/v1/insert", json=doc)
        
        # Search with metadata filter
        search_data = {
            "query": "animal",
            "n_results": 10,
            "metadata_filter": {"animal": "cat"}
        }
        
        response = client.post("/api/v1/search", json=search_data)
        assert response.status_code == 200
        
        data = response.json()
        # Should only return cat documents
        for result in data["results"]:
            if result["metadata"]:
                assert result["metadata"]["animal"] == "cat"
    
    def test_invalid_document_id(self):
        document_data = {
            "doc_id": "invalid!@#$%",
            "text": "Document with invalid ID"
        }
        
        response = client.post("/api/v1/insert", json=document_data)
        assert response.status_code == 422  # Validation error
    
    def test_empty_search_query(self):
        search_data = {
            "query": "",
            "n_results": 5
        }
        
        response = client.post("/api/v1/search", json=search_data)
        assert response.status_code == 422  # Validation error
    
    def test_large_batch_insert(self):
        # Test batch size limit
        documents = [
            {
                "doc_id": f"large_batch_doc_{i}",
                "text": f"Large batch document {i}"
            }
            for i in range(101)  # Exceeds limit of 100
        ]
        
        response = client.post("/api/v1/batch/insert", json=documents)
        assert response.status_code == 400
        assert "exceed" in response.json()["detail"]

if __name__ == "__main__":
    pytest.main([__file__])